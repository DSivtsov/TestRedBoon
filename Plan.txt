??public struct InstantiateInventoryItems convert to static class
change in InventoryItemView the codetype from this. _.

Add to MoneyStoragere that IsMoneyInfinity = false

Item {Active View}

Wallet(MonewStorage) {Model}
InventoryListItem {Model}

??property Trade.IsItemInSellProcess blocked most activity in inventory

TraderTable (Left Always Player Inventory) called by "Current Vendor (InventoryList, Wallet(MonewStorage))"
	....
	LoadOnScreenInventory(_playerItemsView("Item"),_playerListItemSO);
	Item.LinkVisulItemWithSO(InventoryItemSO,Inventory)
	
class Inventory
	TraderTableView traderTableView
	List<InventoryItemSO> listItemSO
	LoadOnScreenInventory()
		Item.LinkVisulItemWithSO(ItemSO, (ushort)positionInInventory);
		
	ItemPurchased(positionInInventory)
		RemoveFromListItemSO()
		RedrawInventory()	Every Changed
		
	ItemSelled(positionInInventory)
		AddToListItemSO()
		RedrawInventory()	Every Changed
		
	RedrawInventory()
		LoadOnScreenInventory()
	
class Item{InventoryItemView} [DInv]
	Remove button componet
		[common] Inventory class
			MyInventory
			OtherInventory (linked Wallet)
	Add class DragInventoryItem
		add (ushort)positionInInventory
		
		Implement interface: IDragItem, IBeginDragItem, IEdnDragItem
		ActivatePlaceHolder()
		[Inject] script PlaceHolderOfDragedItem
		ItemDragged()
			Redraw ItemPosition
		
	Add class DropInventoryItemOnInventory
		WasDropped(OnthisInventory)
			HideItem()
			If (OnthisInventory == OtherInventory) TrySell()
				else DragItemEnd()
		TrySell()
			If (Wallet(other Inventory).CanSpend(ItemCurrentPrice)) ItemPurchased()
				else ItemNotPurchased()
		ItemPurchased()
			Wallet(other Inventory).SpendMoney()
			Inventory(other Inventory).ItemPurchased(positionInInventory)
			Inventory(my Inventory).ItemSelled(positionInInventory)
		ItemNotPurchased()
			PlaceHolderOfDragedItem.Hide()
			ItemUnHideAtInitPos()
			
		
		
Add Object PlaceHolderOfDragedItem [Oph] (common for all Inventory/TraderTable)
	Hide at default
	HideObject()
	SetOnPossitionDragedItem()

Made PlaceDragedItem as SingleTon(throught Injection)

GameObject TraderInventory (on Trader Plane [Idr])
	Add class DropInventoryItem
		Implement interface: IDrop
		DropedObject()
			Get from Event droped object
			If (can got class DropedItemOnInventory)
			DropedItemOnInventory.WasDropped(On this Inventory)

			

GameObject PlayerInventory (on Player Plane [InvPlayer])
	Add class DropInventoryItem


DropInventoryItem (base class)
	abstarct SetMoneyStorage
				Set by Inventory as ShowPanel
				[Inject] script PlayerWallet (PlayerMoneyStorage)
		
Wallet ->(moneyStorage) {Model}
	property bool CanSpend(ammount)
	bool TrySpend(ammount)		//true in case success spending
		CanSpend(ammount)
	void SpendMoney(ammount)
		throw Exception in wrong case
		
		
MoneyPanelAdapter {Presenter}
ItemPanel {View}
		